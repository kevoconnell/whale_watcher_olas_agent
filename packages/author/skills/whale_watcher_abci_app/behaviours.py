# -*- coding: utf-8 -*-
# ------------------------------------------------------------------------------
#
#   Copyright 2023 
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour that autogenerated from the protocol ``."""

import os
from abc import ABC
from typing import Optional, Any
from aea.skills.behaviours import FSMBehaviour, State
from enum import Enum


class WhalewatcherabciappEvents(Enum):
    
    BLOCK_RECEIVED = 'BLOCK_RECEIVED'
    TX_OVER_THRESHOLD = 'TX_OVER_THRESHOLD'
    TX_UNDER_THRESHOLD = 'TX_UNDER_THRESHOLD'
    DONE = 'DONE'
    TIMEOUT = 'TIMEOUT'

class WhalewatcherabciappStates(Enum):
    
    SETUPROUND = 'setupround'
    IDLEROUND = 'idleround'
    BLOCKRECEIVEDROUND = 'blockreceivedround'
    ALERTROUND = 'alertround'
    DONEROUND = 'doneround'
    ERRORROUND = 'errorround'

class BaseState(State, ABC):
    """Base class for states."""
    _state: WhalewatcherabciappStates = None

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._event = None
        self._is_done = False  # Initially, the state is not done

    def act(self) -> None:
        print(f"Performing action for state {self._state}")
        self._is_done = True
        self._event = WhalewatcherabciappEvents.DONE

    def is_done(self) -> bool:
        return self._is_done

    @property
    def event(self) -> Optional[str]:
        return self._event


# Define states

class SetupRound(BaseState):
    """This class implements the behaviour of the state SetupRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = WhalewatcherabciappStates.SETUPROUND

class IdleRound(BaseState):
    """This class implements the behaviour of the state IdleRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = WhalewatcherabciappStates.IDLEROUND

class BlockReceivedRound(BaseState):
    """This class implements the behaviour of the state BlockReceivedRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = WhalewatcherabciappStates.BLOCKRECEIVEDROUND

class AlertRound(BaseState):
    """This class implements the behaviour of the state AlertRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = WhalewatcherabciappStates.ALERTROUND

class DoneRound(BaseState):
    """This class implements the behaviour of the state DoneRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = WhalewatcherabciappStates.DONEROUND

class ErrorRound(BaseState):
    """This class implements the behaviour of the state ErrorRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = WhalewatcherabciappStates.ERRORROUND





class WhalewatcherabciappFsmBehaviour(FSMBehaviour):
    """This class implements a simple Finite State Machine behaviour."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self.register_state(WhalewatcherabciappStates.SETUPROUND.value, SetupRound(**kwargs), True)
        
        self.register_state(WhalewatcherabciappStates.ERRORROUND.value, ErrorRound(**kwargs))
        self.register_state(WhalewatcherabciappStates.DONEROUND.value, DoneRound(**kwargs))
        
        
        self.register_state(WhalewatcherabciappStates.IDLEROUND.value, IdleRound(**kwargs)) 
        self.register_state(WhalewatcherabciappStates.BLOCKRECEIVEDROUND.value, BlockReceivedRound(**kwargs)) 
        self.register_state(WhalewatcherabciappStates.ALERTROUND.value, AlertRound(**kwargs)) 
        
        self.register_transition(
            source=WhalewatcherabciappStates.SETUPROUND.value, 
            event=WhalewatcherabciappEvents.DONE,
            destination=WhalewatcherabciappStates.IDLEROUND.value
        )
        self.register_transition(
            source=WhalewatcherabciappStates.IDLEROUND.value, 
            event=WhalewatcherabciappEvents.BLOCK_RECEIVED,
            destination=WhalewatcherabciappStates.BLOCKRECEIVEDROUND.value
        )
        self.register_transition(
            source=WhalewatcherabciappStates.BLOCKRECEIVEDROUND.value, 
            event=WhalewatcherabciappEvents.TX_OVER_THRESHOLD,
            destination=WhalewatcherabciappStates.ALERTROUND.value
        )
        self.register_transition(
            source=WhalewatcherabciappStates.BLOCKRECEIVEDROUND.value, 
            event=WhalewatcherabciappEvents.TX_UNDER_THRESHOLD,
            destination=WhalewatcherabciappStates.BLOCKRECEIVEDROUND.value
        )
        self.register_transition(
            source=WhalewatcherabciappStates.BLOCKRECEIVEDROUND.value, 
            event=WhalewatcherabciappEvents.DONE,
            destination=WhalewatcherabciappStates.DONEROUND.value
        )
        self.register_transition(
            source=WhalewatcherabciappStates.ALERTROUND.value, 
            event=WhalewatcherabciappEvents.DONE,
            destination=WhalewatcherabciappStates.DONEROUND.value
        )
        self.register_transition(
            source=WhalewatcherabciappStates.DONEROUND.value, 
            event=WhalewatcherabciappEvents.DONE,
            destination=WhalewatcherabciappStates.SETUPROUND.value
        )
        self.register_transition(
            source=WhalewatcherabciappStates.IDLEROUND.value, 
            event=WhalewatcherabciappEvents.DONE,
            destination=WhalewatcherabciappStates.SETUPROUND.value
        )
        self.register_transition(
            source=WhalewatcherabciappStates.BLOCKRECEIVEDROUND.value, 
            event=WhalewatcherabciappEvents.TIMEOUT,
            destination=WhalewatcherabciappStates.ERRORROUND.value
        )
        self.register_transition(
            source=WhalewatcherabciappStates.ALERTROUND.value, 
            event=WhalewatcherabciappEvents.TIMEOUT,
            destination=WhalewatcherabciappStates.ERRORROUND.value
        )


    def setup(self) -> None:
        """Implement the setup."""
        self.context.logger.info("Setting up Whalewatcherabciapp FSM behaviour.")


    def teardown(self) -> None:
        """Implement the teardown."""
        self.context.logger.info("Tearing down Whalewatcherabciapp FSM behaviour.")

    def act(self) -> None:
        """Implement the act."""
        super().act()
        if self.current is None:
            self.context.logger.info("No state to act on.")
            self.terminate()

    def terminate(self) -> None:
        """Implement the termination."""
        print("Terminating the agent.")
        os._exit(0)